/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.opentech.acsemv3dsProxyApiClient.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * EvaluateAuthenticationWebResponse
 */

public class EvaluateAuthenticationWebResponse {
  @JsonProperty("authenticationName")
  private String authenticationName = null;

  /**
   * Gets or Sets authenticationResult
   */
  public enum AuthenticationResultEnum {
    CHALLENGE_NEEDED("CHALLENGE_NEEDED"),
    
    AUTHENTICATED("AUTHENTICATED"),
    
    UNABLE_TO_AUTHENTICATE("UNABLE_TO_AUTHENTICATE"),
    
    NOT_AUTHENTICATED("NOT_AUTHENTICATED"),
    
    AUTHENTICATION_ATTEMPT("AUTHENTICATION_ATTEMPT"),
    
    REJECTED("REJECTED"),
    
    INFORMATIONAL_OK("INFORMATIONAL_OK"),
    
    INFORMATIONAL_DENIED("INFORMATIONAL_DENIED"),
    
    DECOUPLED_AUTHENTICATION("DECOUPLED_AUTHENTICATION");

    private String value;

    AuthenticationResultEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthenticationResultEnum fromValue(String text) {
      for (AuthenticationResultEnum b : AuthenticationResultEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("authenticationResult")
  private AuthenticationResultEnum authenticationResult = null;

  /**
   * Gets or Sets authenticationType
   */
  public enum AuthenticationTypeEnum {
    STATIC("STATIC"),
    
    DYNAMIC("DYNAMIC"),
    
    OOB("OOB"),
    
    DECOUPLED("DECOUPLED");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AuthenticationTypeEnum fromValue(String text) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("authenticationType")
  private AuthenticationTypeEnum authenticationType = null;

  @JsonProperty("cardEnrolled")
  private Boolean cardEnrolled = null;

  @JsonProperty("cardholderInfo")
  private String cardholderInfo = null;

  @JsonProperty("challengeMandatory")
  private Boolean challengeMandatory = null;

  /**
   * Gets or Sets transactionStatusReason
   */
  public enum TransactionStatusReasonEnum {
    CARD_AUTHENTICATION_FAILED("CARD_AUTHENTICATION_FAILED"),
    
    UNKNOWN_DEVICE("UNKNOWN_DEVICE"),
    
    UNSUPPORTED_DEVICE("UNSUPPORTED_DEVICE"),
    
    EXCEEDS_AUTHENTICATION_LIMIT("EXCEEDS_AUTHENTICATION_LIMIT"),
    
    EXPIRED_CARD("EXPIRED_CARD"),
    
    INVALID_CARD_NUMBER("INVALID_CARD_NUMBER"),
    
    INVALID_TRANSACTION("INVALID_TRANSACTION"),
    
    NO_CARD_RECORD("NO_CARD_RECORD"),
    
    SECURITY_FAILURE("SECURITY_FAILURE"),
    
    STOLEN_CARD("STOLEN_CARD"),
    
    SUSPECTED_FRAUD("SUSPECTED_FRAUD"),
    
    TRANSACTION_NOT_PERMITTED_TO_CARDHOLDER("TRANSACTION_NOT_PERMITTED_TO_CARDHOLDER"),
    
    CARDHOLDER_NOT_ENROLLED_IN_SERVICE("CARDHOLDER_NOT_ENROLLED_IN_SERVICE"),
    
    TRANSACTION_TIMED_OUT_AT_THE_ACS("TRANSACTION_TIMED_OUT_AT_THE_ACS"),
    
    LOW_CONFIDENCE("LOW_CONFIDENCE"),
    
    MEDIUM_CONFIDENCE("MEDIUM_CONFIDENCE"),
    
    HIGH_CONFIDENCE("HIGH_CONFIDENCE"),
    
    VERY_HIGH_CONFIDENCE("VERY_HIGH_CONFIDENCE"),
    
    EXCEEDS_ACS_MAXIMUM_CHALLENGES("EXCEEDS_ACS_MAXIMUM_CHALLENGES"),
    
    NON_PAYMENT_TRANSACTION_NOT_SUPPORTED("NON_PAYMENT_TRANSACTION_NOT_SUPPORTED"),
    
    THREE_RI_TRANSACTION_NOT_SUPPORTED("THREE_RI_TRANSACTION_NOT_SUPPORTED");

    private String value;

    TransactionStatusReasonEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransactionStatusReasonEnum fromValue(String text) {
      for (TransactionStatusReasonEnum b : TransactionStatusReasonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("transactionStatusReason")
  private TransactionStatusReasonEnum transactionStatusReason = null;

  public EvaluateAuthenticationWebResponse authenticationName(String authenticationName) {
    this.authenticationName = authenticationName;
    return this;
  }

   /**
   * Get authenticationName
   * @return authenticationName
  **/
  @ApiModelProperty(value = "")
  public String getAuthenticationName() {
    return authenticationName;
  }

  public void setAuthenticationName(String authenticationName) {
    this.authenticationName = authenticationName;
  }

  public EvaluateAuthenticationWebResponse authenticationResult(AuthenticationResultEnum authenticationResult) {
    this.authenticationResult = authenticationResult;
    return this;
  }

   /**
   * Get authenticationResult
   * @return authenticationResult
  **/
  @ApiModelProperty(value = "")
  public AuthenticationResultEnum getAuthenticationResult() {
    return authenticationResult;
  }

  public void setAuthenticationResult(AuthenticationResultEnum authenticationResult) {
    this.authenticationResult = authenticationResult;
  }

  public EvaluateAuthenticationWebResponse authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

   /**
   * Get authenticationType
   * @return authenticationType
  **/
  @ApiModelProperty(value = "")
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }

  public EvaluateAuthenticationWebResponse cardEnrolled(Boolean cardEnrolled) {
    this.cardEnrolled = cardEnrolled;
    return this;
  }

   /**
   * Get cardEnrolled
   * @return cardEnrolled
  **/
  @ApiModelProperty(value = "")
  public Boolean isCardEnrolled() {
    return cardEnrolled;
  }

  public void setCardEnrolled(Boolean cardEnrolled) {
    this.cardEnrolled = cardEnrolled;
  }

  public EvaluateAuthenticationWebResponse cardholderInfo(String cardholderInfo) {
    this.cardholderInfo = cardholderInfo;
    return this;
  }

   /**
   * Get cardholderInfo
   * @return cardholderInfo
  **/
  @ApiModelProperty(value = "")
  public String getCardholderInfo() {
    return cardholderInfo;
  }

  public void setCardholderInfo(String cardholderInfo) {
    this.cardholderInfo = cardholderInfo;
  }

  public EvaluateAuthenticationWebResponse challengeMandatory(Boolean challengeMandatory) {
    this.challengeMandatory = challengeMandatory;
    return this;
  }

   /**
   * Get challengeMandatory
   * @return challengeMandatory
  **/
  @ApiModelProperty(value = "")
  public Boolean isChallengeMandatory() {
    return challengeMandatory;
  }

  public void setChallengeMandatory(Boolean challengeMandatory) {
    this.challengeMandatory = challengeMandatory;
  }

  public EvaluateAuthenticationWebResponse transactionStatusReason(TransactionStatusReasonEnum transactionStatusReason) {
    this.transactionStatusReason = transactionStatusReason;
    return this;
  }

   /**
   * Get transactionStatusReason
   * @return transactionStatusReason
  **/
  @ApiModelProperty(value = "")
  public TransactionStatusReasonEnum getTransactionStatusReason() {
    return transactionStatusReason;
  }

  public void setTransactionStatusReason(TransactionStatusReasonEnum transactionStatusReason) {
    this.transactionStatusReason = transactionStatusReason;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvaluateAuthenticationWebResponse evaluateAuthenticationWebResponse = (EvaluateAuthenticationWebResponse) o;
    return Objects.equals(this.authenticationName, evaluateAuthenticationWebResponse.authenticationName) &&
        Objects.equals(this.authenticationResult, evaluateAuthenticationWebResponse.authenticationResult) &&
        Objects.equals(this.authenticationType, evaluateAuthenticationWebResponse.authenticationType) &&
        Objects.equals(this.cardEnrolled, evaluateAuthenticationWebResponse.cardEnrolled) &&
        Objects.equals(this.cardholderInfo, evaluateAuthenticationWebResponse.cardholderInfo) &&
        Objects.equals(this.challengeMandatory, evaluateAuthenticationWebResponse.challengeMandatory) &&
        Objects.equals(this.transactionStatusReason, evaluateAuthenticationWebResponse.transactionStatusReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationName, authenticationResult, authenticationType, cardEnrolled, cardholderInfo, challengeMandatory, transactionStatusReason);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvaluateAuthenticationWebResponse {\n");
    
    sb.append("    authenticationName: ").append(toIndentedString(authenticationName)).append("\n");
    sb.append("    authenticationResult: ").append(toIndentedString(authenticationResult)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    cardEnrolled: ").append(toIndentedString(cardEnrolled)).append("\n");
    sb.append("    cardholderInfo: ").append(toIndentedString(cardholderInfo)).append("\n");
    sb.append("    challengeMandatory: ").append(toIndentedString(challengeMandatory)).append("\n");
    sb.append("    transactionStatusReason: ").append(toIndentedString(transactionStatusReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

