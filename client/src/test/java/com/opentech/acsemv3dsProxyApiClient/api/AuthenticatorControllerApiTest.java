/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.opentech.acsemv3dsProxyApiClient.api;

import com.opentech.acsemv3dsProxyApiClient.model.CheckAuthResultWebRequest;
import com.opentech.acsemv3dsProxyApiClient.model.CheckAuthResultWebResponse;
import com.opentech.acsemv3dsProxyApiClient.model.ConfirmWhitelistingResultsWebRequest;
import com.opentech.acsemv3dsProxyApiClient.model.EvaluateAuthenticationWebRequest;
import com.opentech.acsemv3dsProxyApiClient.model.EvaluateAuthenticationWebResponse;
import com.opentech.acsemv3dsProxyApiClient.model.EvaluateChallengeStepAuthenticatorWebRequest;
import com.opentech.acsemv3dsProxyApiClient.model.EvaluateChallengeStepAuthenticatorWebResponse;
import com.opentech.acsemv3dsProxyApiClient.model.InitChallengeAuthenticatorWebRequest;
import com.opentech.acsemv3dsProxyApiClient.model.InitChallengeAuthenticatorWebResponse;
import com.opentech.acsemv3dsProxyApiClient.model.PerformDecoupledAuthWebRequest;
import com.opentech.acsemv3dsProxyApiClient.model.PerformDecoupledAuthWebResponse;
import com.opentech.acsemv3dsProxyApiClient.model.ResendChallengeWebRequest;
import com.opentech.acsemv3dsProxyApiClient.model.ResendChallengeWebResponse;
import com.opentech.acsemv3dsProxyApiClient.model.ResponseEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticatorControllerApi
 */
@Ignore
public class AuthenticatorControllerApiTest {

    private final AuthenticatorControllerApi api = new AuthenticatorControllerApi();

    
    /**
     * checkAuthResult
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkAuthResultUsingPOSTTest() {
        CheckAuthResultWebRequest checkAuthResultWebRequest = null;
        String issuerCode = null;
        CheckAuthResultWebResponse response = api.checkAuthResultUsingPOST(checkAuthResultWebRequest, issuerCode);

        // TODO: test validations
    }
    
    /**
     * confirmWhitelistingResults
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmWhitelistingResultsUsingPOSTTest() {
        ConfirmWhitelistingResultsWebRequest confirmWhitelistingResultsWebRequest = null;
        String issuerCode = null;
        ResponseEntity response = api.confirmWhitelistingResultsUsingPOST(confirmWhitelistingResultsWebRequest, issuerCode);

        // TODO: test validations
    }
    
    /**
     * evaluateAuthentication
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void evaluateAuthenticationUsingPOSTTest() {
        EvaluateAuthenticationWebRequest evaluateAuthenticationWebRequest = null;
        String issuerCode = null;
        EvaluateAuthenticationWebResponse response = api.evaluateAuthenticationUsingPOST(evaluateAuthenticationWebRequest, issuerCode);

        // TODO: test validations
    }
    
    /**
     * evaluateChallengeStep
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void evaluateChallengeStepUsingPOSTTest() {
        EvaluateChallengeStepAuthenticatorWebRequest evaluateChallengeStepAuthenticatorWebRequest = null;
        String issuerCode = null;
        EvaluateChallengeStepAuthenticatorWebResponse response = api.evaluateChallengeStepUsingPOST(evaluateChallengeStepAuthenticatorWebRequest, issuerCode);

        // TODO: test validations
    }
    
    /**
     * initChallenge
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initChallengeUsingPOSTTest() {
        InitChallengeAuthenticatorWebRequest initChallengeAuthenticatorWebRequest = null;
        String issuerCode = null;
        InitChallengeAuthenticatorWebResponse response = api.initChallengeUsingPOST(initChallengeAuthenticatorWebRequest, issuerCode);

        // TODO: test validations
    }
    
    /**
     * performDecoupledAuthentication
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void performDecoupledAuthenticationUsingPOSTTest() {
        String issuerCode = null;
        PerformDecoupledAuthWebRequest performDecoupledAuthWebRequest = null;
        PerformDecoupledAuthWebResponse response = api.performDecoupledAuthenticationUsingPOST(issuerCode, performDecoupledAuthWebRequest);

        // TODO: test validations
    }
    
    /**
     * resendChallenge
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendChallengeUsingPOSTTest() {
        String issuerCode = null;
        ResendChallengeWebRequest resendChallengeWebRequest = null;
        ResendChallengeWebResponse response = api.resendChallengeUsingPOST(issuerCode, resendChallengeWebRequest);

        // TODO: test validations
    }
    
}
